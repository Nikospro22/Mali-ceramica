<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Interactividad Biológica</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #d0f0fd, #f1f7f9);
      min-height: 100vh;
      margin: 0;
      display: flex;
      flex-direction: column;
    }
    header {
      background: #0284c7;
      color: white;
      padding: 1.5rem;
      text-align: center;
      font-weight: 700;
      font-size: 1.8rem;
      user-select: none;
      box-shadow: 0 3px 10px rgba(2, 132, 199, 0.5);
    }
    main {
      flex: 1;
      display: flex;
      overflow: hidden;
    }
    nav {
      background: #0369a1;
      width: 240px;
      padding: 1rem;
      color: white;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      user-select: none;
    }
    nav button {
      background: transparent;
      border: none;
      color: white;
      font-size: 1.1rem;
      padding: 0.75rem 1rem;
      border-radius: 0.5rem;
      cursor: pointer;
      text-align: left;
      transition: background-color 0.3s;
    }
    nav button:hover, nav button.active {
      background: #0ea5e9;
      font-weight: 700;
    }
    section.content {
      flex: 1;
      padding: 2.5rem 3rem;
      overflow-y: auto;
      position: relative;
    }
    h2 {
      font-weight: 700;
      font-size: 2rem;
      margin-bottom: 1rem;
      color: #0369a1;
      user-select: text;
    }
    .interactive-area {
      margin-top: 1rem;
      border-radius: 1rem;
      box-shadow: 0 0 15px rgba(3, 105, 161, 0.3);
      background: white;
      overflow: hidden;
      padding: 1rem;
    }
    /* Bubble styles */
    .bubble-container {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      margin-top: 1.5rem;
    }
    .bubble {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      width: 140px;
      height: 140px;
      border-radius: 50%;
      background: #0284c7;
      box-shadow: 0 5px 15px rgba(2, 132, 199, 0.5);
      cursor: pointer;
      color: white;
      user-select: none;
      transition: transform 0.3s;
      font-weight: 600;
      padding: 1rem;
      text-align: center;
    }
    .bubble:hover {
      background: #0ea5e9;
      transform: scale(1.1);
      box-shadow: 0 7px 20px rgba(14, 165, 233, 0.7);
    }
    /* Animation canvas container */
    .anim-container {
      margin-top: 1rem;
      width: 100%;
      height: 280px;
      position: relative;
      border: 1px solid #bae6fd;
      background: #e0f2fe;
      border-radius: 15px;
    }
    #canvas {
      width: 100%;
      height: 100%;
      display: block;
      border-radius: 15px;
    }
    /* Explanation text */
    .explanation {
      margin-top: 1rem;
      padding: 1rem;
      background: #dbeafe;
      border-left: 4px solid #0284c7;
      border-radius: 0.5rem;
      font-size: 1.05rem;
      user-select: text;
      min-height: 120px;
      color: #0369a1;
      line-height: 1.4;
    }
  </style>
</head>
<body>
  <header tabindex="0" aria-label="Título principal de la página">
    Biología Interactiva: Metabolismo, Transporte y Fotosíntesis
  </header>
  <main>
    <nav aria-label="Menú de navegación principal">
      <button class="active" data-section="metabolismo" aria-pressed="true" tabindex="0">Metabolismo Celular</button>
      <button data-section="transporte" aria-pressed="false" tabindex="0">Transporte Activo y Pasivo</button>
      <button data-section="fotosintesis" aria-pressed="false" tabindex="0">Fotosíntesis</button>
      <button data-section="biomoleculas" aria-pressed="false" tabindex="0">Biomoléculas</button>
      <button data-section="nutricion" aria-pressed="false" tabindex="0">Nutrición Celular</button>
    </nav>
    <section class="content" tabindex="0" aria-live="polite" aria-atomic="true">
      <!-- Dynamic content will be injected here -->
    </section>
  </main>

  <script>
    // Content data (not literal from notes, but inspired explanations)
    const contentData = {
      metabolismo: {
        title: "Metabolismo Celular",
        intro: `El metabolismo celular es el conjunto de procesos químicos que permiten a la célula crecer, reproducirse y responder a su entorno.`,
        interactive: `
          <p>Explora los tipos de procesos metabólicos:</p>
          <div class="bubble-container" role="list" aria-label="Tipos de procesos metabólicos">
            <div tabindex="0" role="listitem" class="bubble" data-met="anabolico" aria-describedby="desc-anabolico">Anabólico</div>
            <div tabindex="0" role="listitem" class="bubble" data-met="catabolico" aria-describedby="desc-catabolico">Catabólico</div>
          </div>
          <div id="desc-anabolico" class="explanation" hidden>
            <strong>Proceso Anabólico:</strong> Construcción de moléculas complejas a partir de otras más simples usando energía.
          </div>
          <div id="desc-catabolico" class="explanation" hidden>
            <strong>Proceso Catabólico:</strong> Descomposición de moléculas complejas en otras más simples liberando energía.
          </div>
        `
      },
      transporte: {
        title: "Transporte Activo y Pasivo",
        intro: `El transporte celular permite mover sustancias dentro y fuera de la célula para mantener el equilibrio.`,
        interactive: `
          <p>Selecciona un tipo de transporte para ver su explicación e animación:</p>
          <div class="bubble-container" role="list" aria-label="Tipos de transporte celular">
            <div tabindex="0" role="listitem" class="bubble" data-tr="pasivo" aria-describedby="desc-pasivo">Transporte Pasivo</div>
            <div tabindex="0" role="listitem" class="bubble" data-tr="activo" aria-describedby="desc-activo">Transporte Activo</div>
          </div>
          <canvas id="canvas" aria-label="Animación sobre tipo de transporte celular" role="img" tabindex="0"></canvas>
          <div id="desc-pasivo" class="explanation" hidden>
            El transporte pasivo mueve sustancia a favor del gradiente de concentración sin gasto de energía, como difusión y ósmosis.
          </div>
          <div id="desc-activo" class="explanation" hidden>
            El transporte activo mueve sustancias en contra de un gradiente y requiere energía, por ejemplo bombas de sodio-potasio.
          </div>
        `
      },
      fotosintesis: {
        title: "Fotosíntesis",
        intro: `La fotosíntesis permite a las plantas transformar la energía del sol en energía química usando cloroplastos.`,
        interactive: `
          <p>Visualice el proceso de fotosíntesis en sus etapas:</p>
          <div class="bubble-container" role="list" aria-label="Etapas de la fotosíntesis">
            <div tabindex="0" role="listitem" class="bubble" data-foto="luminica" aria-describedby="desc-luminica">Etapa Luminica</div>
            <div tabindex="0" role="listitem" class="bubble" data-foto="oscura" aria-describedby="desc-oscura">Etapa Oscura</div>
          </div>
          <canvas id="canvas" aria-label="Animación del proceso de fotosíntesis" role="img" tabindex="0"></canvas>
          <div id="desc-luminica" class="explanation" hidden>
            En la etapa luminosa la energía solar es capturada para dividir agua y liberar oxígeno.
          </div>
          <div id="desc-oscura" class="explanation" hidden>
            En la etapa oscura el dióxido de carbono se transforma en glucosa usando la energía almacenada.
          </div>
        `
      },
      biomoleculas: {
        title: "Biomoléculas",
        intro: `Las biomoléculas son esenciales para la vida e incluyen proteínas, lípidos, carbohidratos y ácidos nucleicos.`,
        interactive: `
          <p>Haz clic en una biomolécula para conocer sus funciones principales:</p>
          <div class="bubble-container" role="list" aria-label="Tipos de biomoléculas">
            <div tabindex="0" role="listitem" class="bubble" data-bio="proteinas" aria-describedby="desc-proteinas">Proteínas</div>
            <div tabindex="0" role="listitem" class="bubble" data-bio="lipidos" aria-describedby="desc-lipidos">Lípidos</div>
            <div tabindex="0" role="listitem" class="bubble" data-bio="carbohidratos" aria-describedby="desc-carbohidratos">Carbohidratos</div>
            <div tabindex="0" role="listitem" class="bubble" data-bio="acidosnucleicos" aria-describedby="desc-acidosnucleicos">Ácidos Nucleicos</div>
          </div>
          <div id="desc-proteinas" class="explanation" hidden>
            Forman estructuras del cuerpo, transportan sustancias y funcionan en defensa y movimiento.
          </div>
          <div id="desc-lipidos" class="explanation" hidden>
            Almacenan energía, protegen órganos y aislan contra el frío, forman la membrana celular.
          </div>
          <div id="desc-carbohidratos" class="explanation" hidden>
            Son fuente rápida de energía y forman parte de estructuras como pared celular y almidones.
          </div>
          <div id="desc-acidosnucleicos" class="explanation" hidden>
            Contienen la información genética (ADN y ARN) y regulan la síntesis proteica.
          </div>
        `
      },
      nutricion: {
        title: "Nutrición Celular",
        intro: `La nutrición es el proceso mediante el cual la célula obtiene y procesa los nutrientes necesarios para vivir.`,
        interactive: `
          <p>Interactúa para conocer medios de nutrición y transporte:</p>
          <div class="bubble-container" role="list" aria-label="Tipos de nutrición y transporte celular">
            <div tabindex="0" role="listitem" class="bubble" data-nut="fagocitosis" aria-describedby="desc-fagocitosis">Fagocitosis</div>
            <div tabindex="0" role="listitem" class="bubble" data-nut="pinocitosis" aria-describedby="desc-pinocitosis">Pinocitosis</div>
            <div tabindex="0" role="listitem" class="bubble" data-nut="difusion" aria-describedby="desc-difusion">Difusión</div>
            <div tabindex="0" role="listitem" class="bubble" data-nut="osmosis" aria-describedby="desc-osmosis">Ósmosis</div>
          </div>
          <div id="desc-fagocitosis" class="explanation" hidden>
            La célula engloba partículas grandes para alimentarse o defenderse.
          </div>
          <div id="desc-pinocitosis" class="explanation" hidden>
            La célula ingiere líquidos y moléculas pequeñas mediante vesículas.
          </div>
          <div id="desc-difusion" class="explanation" hidden>
            Paso de moléculas pequeñas a favor de un gradiente de concentración.
          </div>
          <div id="desc-osmosis" class="explanation" hidden>
            Paso selectivo de agua a través de membranas semipermeables.
          </div>
        `
      }
    };

    const navButtons = document.querySelectorAll('nav button');
    const contentSection = document.querySelector('section.content');
    let canvas, ctx;
    let animationId;

    // Initialize page with first section (Metabolismo)
    function loadSection(sectionId) {
      // Clear canvas animation if any
      if(animationId) {
        cancelAnimationFrame(animationId);
        animationId = null;
      }
      contentSection.innerHTML = `
        <h2>${contentData[sectionId].title}</h2>
        <p>${contentData[sectionId].intro}</p>
        <div class="interactive-area">${contentData[sectionId].interactive}</div>
      `;
      setupInteractions(sectionId);
      if(sectionId === 'transporte' || sectionId === 'fotosintesis') {
        setupCanvasAnimation(sectionId);
      } else {
        if (canvas) {
          canvas.style.display = 'none';
        }
      }
    }

    // Setup clickable bubbles interactions for explanations expansion
    function setupInteractions(sectionId) {
      const bubbles = contentSection.querySelectorAll('.bubble');
      const explanations = contentSection.querySelectorAll('.explanation');
      // Hide all explanations initially
      explanations.forEach(e => e.hidden = true);
      
      bubbles.forEach(bubble => {
        bubble.onclick = () => {
          explanations.forEach(e => e.hidden = true);
          const id = bubble.getAttribute('aria-describedby');
          if(id) {
            const el = contentSection.querySelector('#' + id);
            if(el) {
              el.hidden = false;
            }
          }
          // Trigger animation if transporte or fotosíntesis selected bubble
          if(canvas && (sectionId === 'transporte' || sectionId === 'fotosintesis')) {
            const dataset = bubble.dataset;
            if(sectionId === 'transporte') {
              if(dataset.tr) {
                animateTransporte(dataset.tr);
              }
            } else if(sectionId === 'fotosintesis') {
              if(dataset.foto) {
                animateFotosintesis(dataset.foto);
              }
            }
          }
        };
        // Keyboard support
        bubble.onkeydown = (e) => {
          if(e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            bubble.click();
          }
        };
      });
    }

    // Canvas setup for animations
    function setupCanvasAnimation(sectionId) {
      if(!canvas) {
        canvas = document.getElementById('canvas');
        if(!canvas) return;
        ctx = canvas.getContext('2d');
        canvas.style.display = 'block';
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
      } else {
        canvas.style.display = 'block';
        resizeCanvas();
      }
      
      // Clear canvas initially
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if(sectionId === 'transporte') {
        animateTransporte('pasivo');
      } else if(sectionId === 'fotosintesis') {
        animateFotosintesis('luminica');
      }
    }

    // Resize canvas dynamically to container size
    function resizeCanvas() {
      if(!canvas) return;
      const rect = canvas.getBoundingClientRect();
      canvas.width = rect.width * window.devicePixelRatio;
      canvas.height = rect.height * window.devicePixelRatio;
      if(ctx) {
        ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transform
        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
      }
    }

    // Transporte animation implementation
    let transporteAnimState = 0;
    function animateTransporte(type) {
      if(!canvas || !ctx) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const cw = canvas.width / window.devicePixelRatio;
      const ch = canvas.height / window.devicePixelRatio;
      ctx.clearRect(0, 0, cw, ch);

      // Basic drawings for cell membrane and molecules
      function drawMembrane() {
        ctx.fillStyle = '#0284c7';
        ctx.fillRect(cw*0.1, ch*0.3, cw*0.8, ch*0.1);
        ctx.fillRect(cw*0.1, ch*0.6, cw*0.8, ch*0.1);
        // phospholipids stylized circles in membrane
        for(let i = 0; i < 15; i++) {
          ctx.beginPath();
          ctx.arc(cw*0.1 + i*40, ch*0.35, 8, 0, Math.PI*2);
          ctx.fillStyle = 'rgba(255,255,255,0.6)';
          ctx.fill();
          ctx.beginPath();
          ctx.arc(cw*0.1 + i*40, ch*0.65, 8, 0, Math.PI*2);
          ctx.fill();
        }
      }
      function drawMolecule(x, y, color='orange') {
        ctx.beginPath();
        ctx.fillStyle = color;
        ctx.shadowColor = 'rgba(255,165,0,0.7)';
        ctx.shadowBlur = 8;
        ctx.arc(x, y, 14, 0, Math.PI * 2);
        ctx.fill();
        ctx.shadowBlur = 0;
      }
      drawMembrane();

      if(type === 'pasivo') {
        // Muestra moléculas moviendose de un lado a otro siguiendo gradiente
        const speed = 1.5;
        transporteAnimState += speed;
        const pos = (transporteAnimState % (cw*0.8)) + cw*0.1;
        // Moleculas moviendose derecha a izquierda atravesando membrana
        drawMolecule(cw*0.9 - (transporteAnimState % (cw*0.8)), ch*0.35, 'orange');
        drawMolecule(cw*0.1 + (transporteAnimState % (cw*0.8)), ch*0.65, 'yellow');
        // Flecha indicando gradiente
        ctx.strokeStyle = '#eab308';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(cw*0.2, ch*0.25);
        ctx.lineTo(cw*0.8, ch*0.25);
        ctx.lineTo(cw*0.75, ch*0.2);
        ctx.moveTo(cw*0.8, ch*0.25);
        ctx.lineTo(cw*0.75, ch*0.3);
        ctx.stroke();

      } else if(type === 'activo') {
        // Muestra moléculas moviendose contra el gradiente y energía en forma de "destellos"
        transporteAnimState++;
        const pos = (transporteAnimState * 2) % (cw * 0.8) + cw*0.1;
        // Moleculas moviendose izquierda a derecha atravesando membrana
        drawMolecule((transporteAnimState*2) % (cw * 0.8) + cw*0.1, ch*0.65, 'red');
        drawMolecule(cw*0.9 - (transporteAnimState * 2) % (cw * 0.8), ch*0.35, 'purple');
        // Flecha indicando transporte contrario a gradiente
        ctx.strokeStyle = '#ef4444';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(cw*0.8, ch*0.25);
        ctx.lineTo(cw*0.2, ch*0.25);
        ctx.lineTo(cw*0.25, ch*0.2);
        ctx.moveTo(cw*0.2, ch*0.25);
        ctx.lineTo(cw*0.25, ch*0.3);
        ctx.stroke();
        // Energía como destellos
        if(transporteAnimState % 10 < 5) {
          ctx.fillStyle = 'yellow';
          ctx.beginPath();
          ctx.arc(cw*0.5, ch*0.2, 10, 0, Math.PI*2);
          ctx.fill();
          ctx.fillStyle = 'white';
          ctx.font = 'bold 16px Verdana';
          ctx.fillText('ATP', cw*0.48, ch*0.22);
        }
      }

      animationId = requestAnimationFrame(() => animateTransporte(type));
    }

    // Fotosíntesis animation implementation
    let fotosIntState = 0;
    function animateFotosintesis(stage) {
      if(!canvas || !ctx) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const cw = canvas.width / window.devicePixelRatio;
      const ch = canvas.height / window.devicePixelRatio;
      ctx.clearRect(0, 0, cw, ch);

      // Draw leaf shape simplified
      function drawLeaf() {
        ctx.fillStyle = '#4ade80';
        ctx.beginPath();
        ctx.ellipse(cw*0.5, ch*0.5, 200, 120, Math.PI/6, 0, Math.PI*2);
        ctx.fill();
      }

      // Draw sun at top left
      function drawSun() {
        ctx.fillStyle = '#fbbf24';
        ctx.beginPath();
        ctx.arc(cw*0.15, ch*0.15, 50, 0, Math.PI * 2);
        ctx.fill();
        // sun rays
        for(let i = 0; i < 8; i++) {
          let angle = i * Math.PI / 4;
          let x1 = cw*0.15 + Math.cos(angle)*60;
          let y1 = ch*0.15 + Math.sin(angle)*60;
          let x2 = cw*0.15 + Math.cos(angle)*80;
          let y2 = ch*0.15 + Math.sin(angle)*80;
          ctx.strokeStyle = '#fbbf24';
          ctx.lineWidth = 3;
          ctx.beginPath();
          ctx.moveTo(x1, y1);
          ctx.lineTo(x2, y2);
          ctx.stroke();
        }
      }

      drawLeaf();
      drawSun();

      // Animate water molecules and oxygen gas for luminica
      if(stage === 'luminica') {
        fotosIntState++;
        // Water molecules at bottom left moving upwards into leaf
        let baseX = cw*0.3, baseY = ch*0.75;
        for(let i=0; i<5; i++) {
          let offsetX = Math.sin((fotosIntState+i*20)*0.1)*10;
          let y = baseY - ((fotosIntState+i*30) % 150);
          drawMolecule(baseX + offsetX, y, '#3b82f6', 'H2O');
        }
        // Oxygen molecules escaping top right
        let oxyBaseX = cw*0.7, oxyBaseY = ch*0.3;
        for(let j=0; j<3; j++) {
          let offsetX = Math.cos((fotosIntState+j*30)*0.1)*8;
          let y = oxyBaseY - ((fotosIntState+j*40) % 150);
          drawMolecule(oxyBaseX + offsetX, y, '#f87171', 'O2');
        }
      } else if(stage === 'oscura') {
        // Animate CO2 entering leaf and glucose forming inside
        fotosIntState++;
        let co2BaseX = cw*0.7, co2BaseY = ch*0.75;
        for(let i=0; i<4; i++) {
          let offsetX = Math.sin((fotosIntState+i*25)*0.1)*9;
          let y = co2BaseY - ((fotosIntState+i*40) % 170);
          drawMolecule(co2BaseX + offsetX, y, '#14b8a6', 'CO2');
        }
        // Glucose molecule inside leaf increasing brightness
        let glow = 0.7 + 0.3 * Math.sin(fotosIntState*0.1);
        ctx.beginPath();
        ctx.fillStyle = `rgba(132, 204, 22, ${glow.toFixed(2)})`;
        ctx.arc(cw*0.5, ch*0.5, 30, 0, Math.PI*2);
        ctx.fill();
        ctx.fillStyle = 'white';
        ctx.font = '16px Verdana';
        ctx.fillText('Glucosa', cw*0.46, ch*0.54);
      }

      // Helper function to draw molecule circles with labels
      function drawMolecule(x, y, color, label) {
        ctx.beginPath();
        ctx.fillStyle = color;
        ctx.shadowColor = color;
        ctx.shadowBlur = 8;
        ctx.arc(x, y, 14, 0, Math.PI * 2);
        ctx.fill();
        ctx.shadowBlur = 0;
        if(label) {
          ctx.fillStyle = 'white';
          ctx.font = 'bold 14px Verdana';
          ctx.fillText(label, x - ctx.measureText(label).width/2, y + 5);
        }
      }
      animationId = requestAnimationFrame(() => animateFotosintesis(stage));
    }
    
    // Navigation behavior
    navButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        navButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.setAttribute('aria-pressed', 'false');
        });
        button.classList.add('active');
        button.setAttribute('aria-pressed', 'true');
        loadSection(button.dataset.section);
      });
    });

    // Load default section on page load
    loadSection('metabolismo');
  </script>
</body>
</html>

